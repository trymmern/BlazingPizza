@page "/"
@inject HttpClient HttpClient
@inject OrderState OrderState
@inject NavigationManager NavigationManager

<PageTitle>Blazing Pizza</PageTitle>

<div class="main">
    <ul class="pizza-cards">
        @if (_specials != null)
        {
            @foreach (var special in _specials)
            {
                <li @onclick="() => OrderState.ShowConfiguringPizzaDialog(special)" style="background-image: url('@special.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@special.Name</span>
                        @special.Description
                        <span class="price">@special.GetFormattedBasePrice()</span>
                    </div>
                </li>
            }
        }
    </ul>
</div>

<div class="sidebar">
    @if (OrderState.Order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Your order</h2>
            
            @foreach (var configuredPizza in OrderState.Order.Pizzas)
            {
                <ConfiguredPizzaItem Pizza="configuredPizza" OnRemoved="@(() => OrderState.RemoveConfiguredPizza(configuredPizza))" />
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Choose a pizza<br/>to get started</div>
    }
    
    <div class="order-total @(OrderState.Order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@OrderState.Order.GetFormattedTotalPrice()</span>
        <a class="btn btn-warning @(OrderState.Order.Pizzas.Count == 0 ? "disabled" : "")" href="checkout">
            Order >
        </a>
    </div>
</div>

@if (OrderState.ShowConfiguringDialog)
{
    <ConfigurePizzaDialog Pizza="OrderState.ConfiguringPizza" OnCancel="OrderState.CancelConfigurePizzaDialog" OnConfirm="OrderState.ConfirmConfigurePizzaDialog"/>
}

@code
{
    List<PizzaSpecial> _specials;

    protected override async Task OnInitializedAsync()
    {
        _specials = await HttpClient.GetFromJsonAsync("specials", OrderContext.Default.ListPizzaSpecial);
    }
}
